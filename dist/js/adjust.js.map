{"version":3,"file":"adjust.js","mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,eAAe;AACnD;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,OAAO;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,GAAG,yBAAyB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAAe,oCAAU;AACzB;AACA;AACA;;;;;;;;;;;;;;;;;;;;AChKO;AACP,sBAAsB,mCAAmC;AACzD,0CAA0C,wBAAwB;AAClE,GAAG;AACH;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,YAAY,eAAe;AAC3B,YAAY,qBAAqB;AACjC,YAAY,qBAAqB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;AACH;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,sBAAsB;AAClC,YAAY,wBAAwB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACO;AACP;AACA;AACA,kDAAkD;AAClD;AACA,kCAAkC,2BAA2B;AAC7D,6CAA6C,iBAAiB;AAC9D;AACA,+BAA+B,eAAe;AAC9C;AACA;AACA;AACO;AACP;AACA;AACA,kBAAkB,oBAAoB;AACtC;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AC7H8D;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA,uBAAuB,cAAc;AACrC;AACA,GAAG;AACH;AACA;AACO;AACP;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACO;AACP;AACA,IAAI,gEAAmB;AACvB;AACA;AACA;AACO;AACP;AACA,EAAE,wDAAU;AACZ;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,UAAU;AACvC,+CAA+C,OAAO;AACtD,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA,GAAG;AACH;;;;;;;SCtQA;SACA;;SAEA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;;SAEA;SACA;;SAEA;SACA;SACA;;;;;UCtBA;UACA;UACA;UACA;UACA,yCAAyC,wCAAwC;UACjF;UACA;UACA;;;;;UCPA;;;;;UCAA;UACA;UACA;UACA,uDAAuD,iBAAiB;UACxE;UACA,gDAAgD,aAAa;UAC7D;;;;;;;;;;;;;;ACN8D;AACkB;AAChD;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,qBAAqB;AACnC,cAAc,qBAAqB;AACnC,cAAc,eAAe;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mBAAmB;AACvC,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,QAAQ;AACtD,6DAA6D,SAAS;AACtE;AACA,gCAAgC,WAAW;AAC3C,8BAA8B,WAAW;AACzC;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,6BAA6B,0BAA0B;AACvD;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA,+BAA+B,0BAA0B;AACzD;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,MAAM,2BAA2B;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,cAAc,SAAS,8BAA8B;AAC7E,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,6BAA6B,YAAY,kBAAkB,cAAc;AACzE,6BAA6B,8BAA8B;AAC3D;AACA,8BAA8B,WAAW;AACzC;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,4CAA4C,kBAAkB,gBAAgB;AAC9E,IAAI,uDAAM;AACV,GAAG;AACH;AACA;AACA;AACA;AACA,MAAM,2CAA2C;AACjD,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,0DAAa;AACxD;AACA;AACA;AACA,kBAAkB,gBAAgB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,4BAA4B;AAC7C,uBAAuB,KAAK,mBAAmB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,iBAAiB;AAC9C,EAAE,oEAAgB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,sBAAsB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,EAAE;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,EAAE;AACtC;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,+BAA+B;AACxD,6BAA6B,iBAAiB;AAC9C,EAAE,oEAAgB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB,uBAAuB,KAAK,mBAAmB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,yBAAyB;AAC3C;AACA,oBAAoB,8BAA8B;AAClD;AACA,sDAAsD,MAAM;AAC5D,iCAAiC,MAAM,IAAI,qBAAqB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,kBAAkB,gBAAgB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gBAAgB;AAClC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,kBAAkB,mBAAmB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,yBAAyB;AAC3C;AACA,oBAAoB,8BAA8B;AAClD,4BAA4B,MAAM,IAAI,qBAAqB;AAC3D,2BAA2B,MAAM;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,mBAAmB;AAChD;AACA;AACA;AACA,kBAAkB,yBAAyB;AAC3C,oBAAoB,8BAA8B;AAClD,4BAA4B,gBAAgB,IAAI,qBAAqB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,oBAAoB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,gBAAgB;AACvD,WAAW;AACX;AACA;AACA;AACA;AACA,8BAA8B,4EAAyB;AACvD,uCAAuC,iBAAiB;AACxD,YAAY,oEAAgB;AAC5B;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,uCAAuC,eAAe;AACtD,WAAW;AACX;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,EAAE,6DAAgB;AAClB;AACA,CAAC","sources":["webpack:///./src/FileSaver.js","webpack:///./src/common_lib.js","webpack:///./src/context_menu_lib.js","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./src/adjust.js"],"sourcesContent":["/* FileSaver.js\r\n * A saveAs() FileSaver implementation.\r\n * 1.3.2\r\n * 2016-06-16 18:25:19\r\n *\r\n * By Eli Grey, http://eligrey.com\r\n * License: MIT\r\n *   See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md\r\n */\r\n\r\n/* jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true */\r\n\r\n/*! @source https://github.com/eligrey/FileSaver.js/blob/master/dist/FileSaver.js */\r\n\r\nconst view = window\r\nconst doc = view.document\r\n// only get URL when necessary in case Blob.js hasn't overridden it yet\r\nconst get_URL = function () {\r\n  return view.URL || view.webkitURL || view\r\n}\r\nconst save_link = doc.createElementNS('http://www.w3.org/1999/xhtml', 'a')\r\nconst can_use_save_link = 'download' in save_link\r\nconst click = function (node) {\r\n  const event = new MouseEvent('click')\r\n  node.dispatchEvent(event)\r\n}\r\nconst is_safari = /constructor/i.test(view.HTMLElement) || view.safari\r\nconst is_chrome_ios = /CriOS\\/[\\d]+/.test(navigator.userAgent)\r\nconst throw_outside = function (ex) {\r\n  ;(view.setImmediate || view.setTimeout)(function () {\r\n    throw ex\r\n  }, 0)\r\n}\r\nconst force_saveable_type = 'application/octet-stream'\r\n// the Blob API is fundamentally broken as there is no \"downloadfinished\" event to subscribe to\r\nconst arbitrary_revoke_timeout = 1000 * 40 // in ms\r\nconst revoke = function (file) {\r\n  const revoker = function () {\r\n    if (typeof file === 'string') {\r\n      // file is an object URL\r\n      get_URL().revokeObjectURL(file)\r\n    } else {\r\n      // file is a File\r\n      file.remove()\r\n    }\r\n  }\r\n  setTimeout(revoker, arbitrary_revoke_timeout)\r\n}\r\nconst dispatch = function (filesaver, event_types, event) {\r\n  event_types = [].concat(event_types)\r\n  let i = event_types.length\r\n  while (i--) {\r\n    const listener = filesaver[`on${event_types[i]}`]\r\n    if (typeof listener === 'function') {\r\n      try {\r\n        listener.call(filesaver, event || filesaver)\r\n      } catch (ex) {\r\n        throw_outside(ex)\r\n      }\r\n    }\r\n  }\r\n}\r\nconst auto_bom = function (blob) {\r\n  // prepend BOM for UTF-8 XML and text/* types (including HTML)\r\n  // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF\r\n  if (\r\n    /^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(\r\n      blob.type,\r\n    )\r\n  ) {\r\n    return new Blob([String.fromCharCode(0xfeff), blob], {\r\n      type: blob.type,\r\n    })\r\n  }\r\n  return blob\r\n}\r\nconst FileSaver = function (blob, name, no_auto_bom) {\r\n  if (!no_auto_bom) {\r\n    blob = auto_bom(blob)\r\n  }\r\n  // First try a.download, then web filesystem, then object URLs\r\n  const filesaver = this\r\n  const { type } = blob\r\n  const force = type === force_saveable_type\r\n  let object_url\r\n  const dispatch_all = function () {\r\n    dispatch(filesaver, 'writestart progress write writeend'.split(' '))\r\n  }\r\n  // on any filesys errors revert to saving with object URLs\r\n  const fs_error = function () {\r\n    if ((is_chrome_ios || (force && is_safari)) && view.FileReader) {\r\n      // Safari doesn't allow downloading of blob urls\r\n      const reader = new FileReader()\r\n      reader.onloadend = function () {\r\n        let url = is_chrome_ios\r\n          ? reader.result\r\n          : reader.result.replace(/^data:[^;]*;/, 'data:attachment/file;')\r\n        const popup = view.open(url, '_blank')\r\n        if (!popup) view.location.href = url\r\n        url = undefined // release reference before dispatching\r\n        filesaver.readyState = filesaver.DONE\r\n        dispatch_all()\r\n      }\r\n      reader.readAsDataURL(blob)\r\n      filesaver.readyState = filesaver.INIT\r\n      return\r\n    }\r\n    // don't create more object URLs than needed\r\n    if (!object_url) {\r\n      object_url = get_URL().createObjectURL(blob)\r\n    }\r\n    if (force) {\r\n      view.location.href = object_url\r\n    } else {\r\n      const opened = view.open(object_url, '_blank')\r\n      if (!opened) {\r\n        // Apple does not allow window.open, see https://developer.apple.com/library/safari/documentation/Tools/Conceptual/SafariExtensionGuide/WorkingwithWindowsandTabs/WorkingwithWindowsandTabs.html\r\n        view.location.href = object_url\r\n      }\r\n    }\r\n    filesaver.readyState = filesaver.DONE\r\n    dispatch_all()\r\n    revoke(object_url)\r\n  }\r\n  filesaver.readyState = filesaver.INIT\r\n\r\n  if (can_use_save_link) {\r\n    object_url = get_URL().createObjectURL(blob)\r\n    setTimeout(function () {\r\n      save_link.href = object_url\r\n      save_link.download = name\r\n      click(save_link)\r\n      dispatch_all()\r\n      revoke(object_url)\r\n      filesaver.readyState = filesaver.DONE\r\n    })\r\n    return\r\n  }\r\n\r\n  fs_error()\r\n}\r\nconst FS_proto = FileSaver.prototype\r\n\r\nFS_proto.abort = function () {}\r\nFS_proto.readyState = FS_proto.INIT = 0\r\nFS_proto.WRITING = 1\r\nFS_proto.DONE = 2\r\n\r\nFS_proto.error =\r\n  FS_proto.onwritestart =\r\n  FS_proto.onprogress =\r\n  FS_proto.onwrite =\r\n  FS_proto.onabort =\r\n  FS_proto.onerror =\r\n  FS_proto.onwriteend =\r\n    null\r\n\r\nexport default function (blob, name, no_auto_bom) {\r\n  return new FileSaver(blob, name || blob.name || 'download', no_auto_bom)\r\n}\r\n// return saveAs;\r\n","export function request_unhighlight(lemma) {\r\n  chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {\r\n    chrome.tabs.sendMessage(tabs[0].id, { wdm_unhighlight: lemma })\r\n  })\r\n}\r\n\r\nexport function make_id_suffix(text) {\r\n  const before = btoa(text)\r\n  const after = before\r\n    .replace(/\\+/g, '_')\r\n    .replace(/\\//g, '-')\r\n    .replace(/=/g, '_')\r\n  return after\r\n}\r\n\r\nexport function sync_if_needed() {\r\n  const req_keys = ['wd_last_sync', 'wd_gd_sync_enabled', 'wd_last_sync_error']\r\n  chrome.storage.local.get(req_keys, function (result) {\r\n    const { wd_last_sync } = result\r\n    const { wd_gd_sync_enabled } = result\r\n    const { wd_last_sync_error } = result\r\n    if (!wd_gd_sync_enabled || wd_last_sync_error != null) {\r\n      return\r\n    }\r\n    const cur_date = new Date()\r\n    const mins_passed = (cur_date.getTime() - wd_last_sync) / (60 * 1000)\r\n    const sync_period_mins = 30\r\n    if (mins_passed >= sync_period_mins) {\r\n      chrome.runtime.sendMessage({\r\n        wdm_request: 'gd_sync',\r\n        interactive_mode: false,\r\n      })\r\n    }\r\n  })\r\n}\r\n\r\nexport function add_lexeme(lexeme, result_handler) {\r\n  const req_keys = [\r\n    'words_discoverer_eng_dict',\r\n    'wd_idioms',\r\n    'wd_user_vocabulary',\r\n    'wd_user_vocab_added',\r\n    'wd_user_vocab_deleted',\r\n  ]\r\n  chrome.storage.local.get(req_keys, function (result) {\r\n    const dict_words = result.words_discoverer_eng_dict\r\n    const dict_idioms = result.wd_idioms\r\n    const user_vocabulary = result.wd_user_vocabulary\r\n    const { wd_user_vocab_added } = result\r\n    const { wd_user_vocab_deleted } = result\r\n    if (lexeme.length > 100) {\r\n      result_handler('bad', undefined)\r\n      return\r\n    }\r\n    lexeme = lexeme.toLowerCase()\r\n    lexeme = lexeme.trim()\r\n    if (!lexeme) {\r\n      result_handler('bad', undefined)\r\n      return\r\n    }\r\n\r\n    let key = lexeme\r\n    if (dict_words.hasOwnProperty(lexeme)) {\r\n      const wf = dict_words[lexeme]\r\n      if (wf) {\r\n        const [first] = wf\r\n        key = first\r\n      }\r\n    } else if (dict_idioms.hasOwnProperty(lexeme)) {\r\n      const wf = dict_idioms[lexeme]\r\n      if (wf && wf !== -1) {\r\n        key = wf\r\n      }\r\n    }\r\n\r\n    if (user_vocabulary.hasOwnProperty(key)) {\r\n      result_handler('exists', key)\r\n      return\r\n    }\r\n\r\n    const new_state = { wd_user_vocabulary: user_vocabulary }\r\n\r\n    user_vocabulary[key] = 1\r\n    if (typeof wd_user_vocab_added !== 'undefined') {\r\n      wd_user_vocab_added[key] = 1\r\n      new_state.wd_user_vocab_added = wd_user_vocab_added\r\n    }\r\n    if (typeof wd_user_vocab_deleted !== 'undefined') {\r\n      delete wd_user_vocab_deleted[key]\r\n      new_state.wd_user_vocab_deleted = wd_user_vocab_deleted\r\n    }\r\n\r\n    chrome.storage.local.set(new_state, function () {\r\n      sync_if_needed()\r\n      result_handler('ok', key)\r\n    })\r\n  })\r\n}\r\n\r\nexport function make_hl_style(hl_params) {\r\n  if (!hl_params.enabled) return undefined\r\n  let result = ''\r\n  if (hl_params.bold) result += 'font-weight:bold;'\r\n  if (hl_params.useBackground)\r\n    result += `background-color:${hl_params.backgroundColor};`\r\n  if (hl_params.useColor) result += `color:${hl_params.color};`\r\n  if (!result) return undefined\r\n  result += 'font-size:inherit;display:inline;'\r\n  return result\r\n}\r\n\r\nexport function localizeHtmlPage() {\r\n  // Localize by replacing __MSG_***__ meta tags\r\n  const objects = document.getElementsByTagName('html')\r\n  for (let j = 0; j < objects.length; j++) {\r\n    const obj = objects[j]\r\n    const valStrH = obj.innerHTML.toString()\r\n    const valNewH = valStrH.replace(/__MSG_(\\w+)__/g, function (match, v1) {\r\n      return v1 ? chrome.i18n.getMessage(v1) : ''\r\n    })\r\n    if (valNewH !== valStrH) {\r\n      obj.innerHTML = valNewH\r\n    }\r\n  }\r\n}\r\n\r\n","import { request_unhighlight, add_lexeme } from './common_lib'\r\n\r\nconst isoLangs = {\r\n  ab: 'Abkhaz',\r\n  aa: 'Afar',\r\n  af: 'Afrikaans',\r\n  ak: 'Akan',\r\n  sq: 'Albanian',\r\n  am: 'Amharic',\r\n  ar: 'Arabic',\r\n  an: 'Aragonese',\r\n  hy: 'Armenian',\r\n  as: 'Assamese',\r\n  av: 'Avaric',\r\n  ae: 'Avestan',\r\n  ay: 'Aymara',\r\n  az: 'Azerbaijani',\r\n  bm: 'Bambara',\r\n  ba: 'Bashkir',\r\n  eu: 'Basque',\r\n  be: 'Belarusian',\r\n  bn: 'Bengali',\r\n  bh: 'Bihari',\r\n  bi: 'Bislama',\r\n  bs: 'Bosnian',\r\n  br: 'Breton',\r\n  bg: 'Bulgarian',\r\n  my: 'Burmese',\r\n  ca: 'Catalan',\r\n  ch: 'Chamorro',\r\n  ce: 'Chechen',\r\n  ny: 'Chichewa',\r\n  zh: 'Chinese',\r\n  cv: 'Chuvash',\r\n  kw: 'Cornish',\r\n  co: 'Corsican',\r\n  cr: 'Cree',\r\n  hr: 'Croatian',\r\n  cs: 'Czech',\r\n  da: 'Danish',\r\n  dv: 'Divehi',\r\n  nl: 'Dutch',\r\n  en: 'English',\r\n  eo: 'Esperanto',\r\n  et: 'Estonian',\r\n  ee: 'Ewe',\r\n  fo: 'Faroese',\r\n  fj: 'Fijian',\r\n  fi: 'Finnish',\r\n  fr: 'French',\r\n  ff: 'Fula',\r\n  gl: 'Galician',\r\n  ka: 'Georgian',\r\n  de: 'German',\r\n  el: 'Greek',\r\n  gu: 'Gujarati',\r\n  ht: 'Haitian',\r\n  ha: 'Hausa',\r\n  he: 'Hebrew',\r\n  hz: 'Herero',\r\n  hi: 'Hindi',\r\n  ho: 'Hiri Motu',\r\n  hu: 'Hungarian',\r\n  ia: 'Interlingua',\r\n  id: 'Indonesian',\r\n  ie: 'Interlingue',\r\n  ga: 'Irish',\r\n  ig: 'Igbo',\r\n  ik: 'Inupiaq',\r\n  io: 'Ido',\r\n  is: 'Icelandic',\r\n  it: 'Italian',\r\n  iu: 'Inuktitut',\r\n  ja: 'Japanese',\r\n  jv: 'Javanese',\r\n  kl: 'Kalaallisut',\r\n  kn: 'Kannada',\r\n  kr: 'Kanuri',\r\n  ks: 'Kashmiri',\r\n  kk: 'Kazakh',\r\n  km: 'Khmer',\r\n  ki: 'Kikuyu',\r\n  rw: 'Kinyarwanda',\r\n  ky: 'Kirghiz',\r\n  kv: 'Komi',\r\n  kg: 'Kongo',\r\n  ko: 'Korean',\r\n  ku: 'Kurdish',\r\n  kj: 'Kwanyama',\r\n  la: 'Latin',\r\n  lb: 'Luxembourgish',\r\n  lg: 'Luganda',\r\n  li: 'Limburgish',\r\n  ln: 'Lingala',\r\n  lo: 'Lao',\r\n  lt: 'Lithuanian',\r\n  lu: 'Luba-Katanga',\r\n  lv: 'Latvian',\r\n  gv: 'Manx',\r\n  mk: 'Macedonian',\r\n  mg: 'Malagasy',\r\n  ms: 'Malay',\r\n  ml: 'Malayalam',\r\n  mt: 'Maltese',\r\n  mh: 'Marshallese',\r\n  mn: 'Mongolian',\r\n  na: 'Nauru',\r\n  nv: 'Navajo',\r\n  nd: 'Ndebele',\r\n  ne: 'Nepali',\r\n  ng: 'Ndonga',\r\n  nn: 'Norwegian',\r\n  no: 'Norwegian',\r\n  ii: 'Nuosu',\r\n  nr: 'Ndebele',\r\n  oc: 'Occitan',\r\n  oj: 'Ojibwe',\r\n  om: 'Oromo',\r\n  or: 'Oriya',\r\n  os: 'Ossetian',\r\n  pa: 'Panjabi',\r\n  fa: 'Persian',\r\n  pl: 'Polish',\r\n  ps: 'Pashto',\r\n  pt: 'Portuguese',\r\n  qu: 'Quechua',\r\n  rm: 'Romansh',\r\n  rn: 'Kirundi',\r\n  ro: 'Romanian',\r\n  ru: 'Russian',\r\n  sc: 'Sardinian',\r\n  sd: 'Sindhi',\r\n  se: 'Sami',\r\n  sm: 'Samoan',\r\n  sg: 'Sango',\r\n  sr: 'Serbian',\r\n  gd: 'Gaelic',\r\n  sn: 'Shona',\r\n  si: 'Sinhala',\r\n  sk: 'Slovak',\r\n  sl: 'Slovene',\r\n  so: 'Somali',\r\n  st: 'Sotho',\r\n  es: 'Spanish',\r\n  su: 'Sundanese',\r\n  sw: 'Swahili',\r\n  ss: 'Swati',\r\n  sv: 'Swedish',\r\n  ta: 'Tamil',\r\n  te: 'Telugu',\r\n  tg: 'Tajik',\r\n  th: 'Thai',\r\n  ti: 'Tigrinya',\r\n  bo: 'Tibetan',\r\n  tk: 'Turkmen',\r\n  tl: 'Tagalog',\r\n  tn: 'Tswana',\r\n  to: 'Tonga',\r\n  tr: 'Turkish',\r\n  ts: 'Tsonga',\r\n  tt: 'Tatar',\r\n  tw: 'Twi',\r\n  ty: 'Tahitian',\r\n  ug: 'Uighur',\r\n  uk: 'Ukrainian',\r\n  ur: 'Urdu',\r\n  uz: 'Uzbek',\r\n  ve: 'Venda',\r\n  vi: 'Vietnamese',\r\n  wa: 'Walloon',\r\n  cy: 'Welsh',\r\n  wo: 'Wolof',\r\n  fy: 'Frisian',\r\n  xh: 'Xhosa',\r\n  yi: 'Yiddish',\r\n  yo: 'Yoruba',\r\n  za: 'Zhuang',\r\n}\r\n\r\nexport function get_dict_definition_url(dictUrl, text) {\r\n  return dictUrl + encodeURIComponent(text)\r\n}\r\n\r\nexport function showDefinition(dictUrl, text) {\r\n  const fullUrl = get_dict_definition_url(dictUrl, text)\r\n  chrome.tabs.create({ url: fullUrl }, function (tab) {\r\n    // opens definition in a new tab\r\n  })\r\n}\r\n\r\nexport function createDictionaryEntry(title, dictUrl, entryId) {\r\n  chrome.contextMenus.create({\r\n    title,\r\n    contexts: ['selection'],\r\n    id: entryId,\r\n  })\r\n  chrome.contextMenus.onClicked.addListener(function (info, tab) {\r\n    const word = info.selectionText\r\n    showDefinition(dictUrl, word)\r\n  })\r\n}\r\n\r\nexport function context_handle_add_result(report, lemma) {\r\n  if (report === 'ok') {\r\n    request_unhighlight(lemma)\r\n  }\r\n}\r\n\r\nexport function onClickHandler(info, tab) {\r\n  const word = info.selectionText\r\n  add_lexeme(word, context_handle_add_result)\r\n}\r\n\r\nexport function make_default_online_dicts() {\r\n  const result = []\r\n\r\n  let uiLang = chrome.i18n.getUILanguage()\r\n  uiLang = uiLang.split('-')[0]\r\n  if (uiLang !== 'en' && isoLangs.hasOwnProperty(uiLang)) {\r\n    const langName = isoLangs[uiLang]\r\n    result.push({\r\n      title: `Translate to ${langName} in Google`,\r\n      url: `https://translate.google.com/#en/${uiLang}/`,\r\n    })\r\n  }\r\n  result.push({\r\n    title: 'Define in Merriam-Webster',\r\n    url: 'https://www.merriam-webster.com/dictionary/',\r\n  })\r\n  result.push({\r\n    title: 'Define in Google',\r\n    url: 'https://encrypted.google.com/search?hl=en&gl=en&q=define:',\r\n  })\r\n  result.push({\r\n    title: 'View pictures in Google',\r\n    url: 'https://encrypted.google.com/search?hl=en&gl=en&tbm=isch&q=',\r\n  })\r\n  return result\r\n}\r\n\r\nexport function initContextMenus(dictPairs) {\r\n  chrome.contextMenus.removeAll(function () {\r\n    const title = chrome.i18n.getMessage('menuItem')\r\n    chrome.contextMenus.create({\r\n      title,\r\n      contexts: ['selection'],\r\n      id: 'vocab_select_add',\r\n    })\r\n    chrome.contextMenus.onClicked.addListener(onClickHandler)\r\n    chrome.contextMenus.create({\r\n      type: 'separator',\r\n      contexts: ['selection'],\r\n      id: 'wd_separator_id',\r\n    })\r\n    for (let i = 0; i < dictPairs.length; ++i) {\r\n      createDictionaryEntry(\r\n        dictPairs[i].title,\r\n        dictPairs[i].url,\r\n        `wd_define_${i}`,\r\n      )\r\n    }\r\n  })\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { localizeHtmlPage, make_hl_style } from './common_lib'\r\nimport { initContextMenus, make_default_online_dicts } from './context_menu_lib'\r\nimport saveAs from './FileSaver'\r\n\r\nlet wd_hl_settings = null\r\nlet wd_hover_settings = null\r\nlet wd_online_dicts = null\r\nlet wd_enable_tts = false\r\n\r\nconst wc_rb_ids = ['wc1', 'wc2', 'wc3', 'wc4', 'wc5']\r\nconst ic_rb_ids = ['ic1', 'ic2', 'ic3', 'ic4', 'ic5']\r\nconst wb_rb_ids = ['wb1', 'wb2', 'wb3', 'wb4', 'wb5']\r\nconst ib_rb_ids = ['ib1', 'ib2', 'ib3', 'ib4', 'ib5']\r\n\r\nconst hover_popup_types = ['never', 'key', 'always']\r\nconst target_types = ['hl', 'ow']\r\n\r\nfunction display_sync_interface() {\r\n  chrome.storage.local.get(\r\n    ['wd_gd_sync_enabled', 'wd_last_sync_error', 'wd_last_sync'],\r\n    function (result) {\r\n      const { wd_last_sync_error } = result\r\n      const { wd_gd_sync_enabled } = result\r\n      const { wd_last_sync } = result\r\n      if (!wd_gd_sync_enabled) {\r\n        document.getElementById('gdStopSyncButton').style.display = 'none'\r\n        document.getElementById('syncStatusFeedback').style.display = 'none'\r\n        return\r\n      }\r\n      document.getElementById('gdStopSyncButton').style.display = 'inline-block'\r\n      document.getElementById('syncStatusFeedback').style.display = 'inline'\r\n      if (wd_last_sync_error != null) {\r\n        document.getElementById('syncStatusFeedback').textContent =\r\n          `Error: ${wd_last_sync_error}`\r\n      } else {\r\n        document.getElementById('syncStatusFeedback').textContent =\r\n          'Synchronized.'\r\n      }\r\n      if (typeof wd_last_sync !== 'undefined') {\r\n        const cur_date = new Date()\r\n        let seconds_passed = (cur_date.getTime() - wd_last_sync) / 1000\r\n        const p_days = Math.floor(seconds_passed / (3600 * 24))\r\n        seconds_passed %= 3600 * 24\r\n        const p_hours = Math.floor(seconds_passed / 3600)\r\n        seconds_passed %= 3600\r\n        const p_minutes = Math.floor(seconds_passed / 60)\r\n        const p_seconds = Math.floor(seconds_passed % 60)\r\n        let passed_time_msg = ''\r\n        if (p_days > 0) passed_time_msg += `${p_days} days, `\r\n        if (p_hours > 0 || p_days > 0) passed_time_msg += `${p_hours} hours, `\r\n        if (p_minutes > 0 || p_hours > 0 || p_days > 0)\r\n          passed_time_msg += `${p_minutes} minutes, `\r\n        passed_time_msg += `${p_seconds} seconds since the last sync.`\r\n        const syncDateLabel = document.getElementById('lastSyncDate')\r\n        syncDateLabel.style.display = 'inline'\r\n        syncDateLabel.textContent = passed_time_msg\r\n      }\r\n    },\r\n  )\r\n}\r\n\r\nfunction synchronize_now() {\r\n  chrome.runtime.onMessage.addListener(\r\n    function (request, sender, sendResponse) {\r\n      if (request.sync_feedback) {\r\n        display_sync_interface()\r\n      }\r\n    },\r\n  )\r\n  document.getElementById('syncStatusFeedback').style.display = 'inline'\r\n  document.getElementById('syncStatusFeedback').textContent =\r\n    'Synchronization started...'\r\n  chrome.storage.local.set({ wd_gd_sync_enabled: true }, function () {\r\n    chrome.runtime.sendMessage({\r\n      wdm_request: 'gd_sync',\r\n      interactive_mode: true,\r\n    })\r\n  })\r\n}\r\n\r\nfunction request_permissions_and_sync() {\r\n  chrome.permissions.request({ origins: ['https://*/*'] }, function (granted) {\r\n    if (!granted) return\r\n    synchronize_now()\r\n  })\r\n}\r\n\r\nfunction stop_synchronization() {\r\n  chrome.storage.local.set(\r\n    { wd_gd_sync_enabled: false },\r\n    display_sync_interface,\r\n  )\r\n}\r\n\r\nfunction process_test_warnings() {\r\n  chrome.management.getPermissionWarningsByManifest(prompt(), console.log)\r\n}\r\n\r\nfunction process_get_dbg() {\r\n  const storage_key = document.getElementById('getFromStorageKey').value\r\n  chrome.storage.local.get([storage_key], function (result) {\r\n    const storage_value = result[storage_key]\r\n    console.log(`key: ${storage_key}; value: ${JSON.stringify(storage_value)}`)\r\n  })\r\n}\r\n\r\nfunction process_set_dbg() {\r\n  console.log('processing dbg')\r\n  const storage_key = document.getElementById('setToStorageKey').value\r\n  let storage_value = document.getElementById('setToStorageVal').value\r\n  if (storage_value === 'undefined') {\r\n    storage_value = undefined\r\n  } else {\r\n    storage_value = JSON.parse(storage_value)\r\n  }\r\n  console.log(`storage_key:${storage_key}, storage_value:${storage_value}`)\r\n  chrome.storage.local.set({ [storage_key]: storage_value }, function () {\r\n    const last_error = chrome.runtime.lastError\r\n    console.log(`last_error:${last_error}`)\r\n    console.log('finished setting value')\r\n  })\r\n}\r\n\r\nfunction process_export() {\r\n  chrome.storage.local.get(['wd_user_vocabulary'], function (result) {\r\n    const user_vocabulary = result.wd_user_vocabulary\r\n    const keys = []\r\n    Object.keys(user_vocabulary).forEach((key) => {\r\n      if (user_vocabulary.hasOwnProperty(key)) {\r\n        keys.push(key)\r\n      }\r\n    })\r\n    const file_content = keys.join('\\r\\n')\r\n    const blob = new Blob([file_content], { type: 'text/plain;charset=utf-8' })\r\n    saveAs(blob, 'my_vocabulary.txt', true)\r\n  })\r\n}\r\n\r\nfunction process_import() {\r\n  chrome.tabs.create(\r\n    { url: chrome.runtime.getURL('import.html') },\r\n    function (tab) {},\r\n  )\r\n}\r\n\r\nfunction highlight_example_text(hl_params, text_id, lq_id, rq_id) {\r\n  document.getElementById(lq_id).textContent = ''\r\n  document.getElementById(rq_id).textContent = ''\r\n  document.getElementById(lq_id).style = undefined\r\n  document.getElementById(rq_id).style = undefined\r\n  document.getElementById(text_id).style = make_hl_style(hl_params)\r\n}\r\n\r\nfunction show_rb_states(ids, color) {\r\n  for (let i = 0; i < ids.length; i++) {\r\n    const doc_element = document.getElementById(ids[i])\r\n    if (doc_element.label.style.backgroundColor === color) {\r\n      doc_element.checked = true\r\n    }\r\n  }\r\n}\r\n\r\nfunction process_test_old_dict(e) {\r\n  const button = e.target\r\n  const btn_id = button.id\r\n  if (!btn_id.startsWith('testDictBtn_')) return\r\n  const btn_no = parseInt(btn_id.split('_')[1], 10)\r\n  const url = `${wd_online_dicts[btn_no].url}test`\r\n  chrome.tabs.create({ url }, function (tab) {})\r\n}\r\n\r\nfunction process_delete_old_dict(e) {\r\n  const button = e.target\r\n  const btn_id = button.id\r\n  if (!btn_id.startsWith('delDict')) return\r\n  const btn_no = parseInt(btn_id.split('_')[1], 10)\r\n  wd_online_dicts.splice(btn_no, 1)\r\n  chrome.storage.local.set({ wd_online_dicts })\r\n  initContextMenus(wd_online_dicts)\r\n  show_user_dicts()\r\n}\r\n\r\nfunction show_user_dicts() {\r\n  const dicts_block = document.getElementById('existingDictsBlock')\r\n  while (dicts_block.firstChild) {\r\n    dicts_block.removeChild(dicts_block.firstChild)\r\n  }\r\n  const dictPairs = wd_online_dicts\r\n  for (let i = 0; i < dictPairs.length; ++i) {\r\n    const nameSpan = document.createElement('span')\r\n    nameSpan.setAttribute('class', 'existingDictName')\r\n    nameSpan.textContent = dictPairs[i].title\r\n    dicts_block.appendChild(nameSpan)\r\n\r\n    const urlInput = document.createElement('input')\r\n    urlInput.setAttribute('type', 'text')\r\n    urlInput.setAttribute('class', 'existingDictUrl')\r\n    urlInput.setAttribute('value', dictPairs[i].url)\r\n    urlInput.readOnly = true\r\n    dicts_block.appendChild(urlInput)\r\n\r\n    const testButton = document.createElement('button')\r\n    testButton.setAttribute('class', 'shortButton')\r\n    testButton.id = `testDictBtn_${i}`\r\n    testButton.textContent = 'Test'\r\n    testButton.addEventListener('click', process_test_old_dict)\r\n    dicts_block.appendChild(testButton)\r\n\r\n    const deleteButton = document.createElement('button')\r\n    deleteButton.setAttribute('class', 'imgButton')\r\n    deleteButton.id = `delDictBtn_${i}`\r\n    const img = document.createElement('img')\r\n    img.setAttribute('src', '../assets/delete.png')\r\n    img.id = `delDictImg_${i}`\r\n    deleteButton.appendChild(img)\r\n    deleteButton.addEventListener('click', process_delete_old_dict)\r\n    dicts_block.appendChild(deleteButton)\r\n\r\n    dicts_block.appendChild(document.createElement('br'))\r\n  }\r\n}\r\n\r\nfunction process_add_dict() {\r\n  let dictName = document.getElementById('addDictName').value\r\n  let dictUrl = document.getElementById('addDictUrl').value\r\n  dictName = dictName.trim()\r\n  dictUrl = dictUrl.trim()\r\n  if (!dictName || !dictUrl) return\r\n  wd_online_dicts.push({ title: dictName, url: dictUrl })\r\n  chrome.storage.local.set({ wd_online_dicts })\r\n  initContextMenus(wd_online_dicts)\r\n  show_user_dicts()\r\n  document.getElementById('addDictName').value = ''\r\n  document.getElementById('addDictUrl').value = ''\r\n}\r\n\r\nfunction process_test_new_dict() {\r\n  let dictUrl = document.getElementById('addDictUrl').value\r\n  dictUrl = dictUrl.trim()\r\n  if (!dictUrl) return\r\n  const url = `${dictUrl}test`\r\n  chrome.tabs.create({ url }, function (tab) {})\r\n}\r\n\r\nfunction show_internal_state() {\r\n  const word_hl_params = wd_hl_settings.wordParams\r\n  const idiom_hl_params = wd_hl_settings.idiomParams\r\n\r\n  document.getElementById('wordsEnabled').checked = word_hl_params.enabled\r\n  document.getElementById('idiomsEnabled').checked = idiom_hl_params.enabled\r\n  document.getElementById('wordsBlock').style.display = word_hl_params.enabled\r\n    ? 'block'\r\n    : 'none'\r\n  document.getElementById('idiomsBlock').style.display = idiom_hl_params.enabled\r\n    ? 'block'\r\n    : 'none'\r\n\r\n  document.getElementById('wordsBold').checked = word_hl_params.bold\r\n  document.getElementById('idiomsBold').checked = idiom_hl_params.bold\r\n\r\n  document.getElementById('wordsBackground').checked =\r\n    word_hl_params.useBackground\r\n  document.getElementById('idiomsBackground').checked =\r\n    idiom_hl_params.useBackground\r\n\r\n  document.getElementById('wordsColor').checked = word_hl_params.useColor\r\n  document.getElementById('idiomsColor').checked = idiom_hl_params.useColor\r\n\r\n  document.getElementById('pronunciationEnabled').checked = wd_enable_tts\r\n\r\n  document.getElementById('wcRadioBlock').style.display =\r\n    word_hl_params.useColor ? 'block' : 'none'\r\n  show_rb_states(wc_rb_ids, word_hl_params.color)\r\n  document.getElementById('icRadioBlock').style.display =\r\n    idiom_hl_params.useColor ? 'block' : 'none'\r\n  show_rb_states(ic_rb_ids, idiom_hl_params.color)\r\n  document.getElementById('wbRadioBlock').style.display =\r\n    word_hl_params.useBackground ? 'block' : 'none'\r\n  show_rb_states(wb_rb_ids, word_hl_params.backgroundColor)\r\n  document.getElementById('ibRadioBlock').style.display =\r\n    idiom_hl_params.useBackground ? 'block' : 'none'\r\n  show_rb_states(ib_rb_ids, idiom_hl_params.backgroundColor)\r\n\r\n  for (let t = 0; t < target_types.length; t++) {\r\n    const ttype = target_types[t]\r\n    for (let i = 0; i < hover_popup_types.length; i++) {\r\n      const is_hit =\r\n        hover_popup_types[i] === wd_hover_settings[`${ttype}_hover`]\r\n      document.getElementById(`${ttype}b_${hover_popup_types[i]}`).checked =\r\n        is_hit\r\n    }\r\n  }\r\n\r\n  highlight_example_text(word_hl_params, 'wordHlText', 'wql', 'wqr')\r\n  highlight_example_text(idiom_hl_params, 'idiomHlText', 'iql', 'iqr')\r\n  show_user_dicts()\r\n}\r\n\r\nfunction add_cb_event_listener(id, dst_params, dst_key) {\r\n  document.getElementById(id).addEventListener('click', function () {\r\n    const checkboxElem = document.getElementById(id)\r\n    if (checkboxElem.checked) {\r\n      dst_params[dst_key] = true\r\n    } else {\r\n      dst_params[dst_key] = false\r\n    }\r\n    show_internal_state()\r\n  })\r\n}\r\n\r\nfunction process_rb(dst_params, dst_key, ids) {\r\n  for (let i = 0; i < ids.length; i++) {\r\n    const doc_element = document.getElementById(ids[i])\r\n    if (doc_element.checked) {\r\n      dst_params[dst_key] = doc_element.label.style.backgroundColor\r\n    }\r\n  }\r\n  show_internal_state()\r\n}\r\n\r\nfunction handle_rb_loop(ids, dst_params, dst_key) {\r\n  for (let i = 0; i < ids.length; i++) {\r\n    document.getElementById(ids[i]).addEventListener('click', function () {\r\n      process_rb(dst_params, dst_key, ids)\r\n    })\r\n  }\r\n}\r\n\r\nfunction assign_back_labels() {\r\n  const labels = document.getElementsByTagName('LABEL')\r\n  for (let i = 0; i < labels.length; i++) {\r\n    if (labels[i].htmlFor !== '') {\r\n      const elem = document.getElementById(labels[i].htmlFor)\r\n      if (elem) elem.label = labels[i]\r\n    }\r\n  }\r\n}\r\n\r\nfunction hover_rb_handler() {\r\n  for (let t = 0; t < target_types.length; t++) {\r\n    const ttype = target_types[t]\r\n    for (let i = 0; i < hover_popup_types.length; i++) {\r\n      const element_id = `${ttype}b_${hover_popup_types[i]}`\r\n      const param_key = `${ttype}_hover`\r\n      const rbElem = document.getElementById(element_id)\r\n      if (rbElem.checked) {\r\n        wd_hover_settings[param_key] = hover_popup_types[i]\r\n      }\r\n    }\r\n  }\r\n  chrome.storage.local.set({ wd_hover_settings })\r\n}\r\n\r\nfunction add_hover_rb_listeners() {\r\n  for (let t = 0; t < target_types.length; t++) {\r\n    for (let i = 0; i < hover_popup_types.length; i++) {\r\n      const element_id = `${target_types[t]}b_${hover_popup_types[i]}`\r\n      document\r\n        .getElementById(element_id)\r\n        .addEventListener('click', hover_rb_handler)\r\n    }\r\n  }\r\n}\r\n\r\nfunction process_display() {\r\n  window.onload = function () {\r\n    chrome.storage.local.get(\r\n      [\r\n        'wd_hl_settings',\r\n        'wd_hover_settings',\r\n        'wd_online_dicts',\r\n        'wd_developer_mode',\r\n        'wd_enable_tts',\r\n      ],\r\n      function (result) {\r\n        assign_back_labels()\r\n        wd_hl_settings = result.wd_hl_settings\r\n        wd_hover_settings = result.wd_hover_settings\r\n        wd_online_dicts = result.wd_online_dicts\r\n        wd_enable_tts = !!result.wd_enable_tts\r\n\r\n        const { wd_developer_mode } = result\r\n\r\n        // TODO fix this monstrosity using this wrapper-function hack:\r\n        // http://stackoverflow.com/questions/7053965/when-using-callbacks-inside-a-loop-in-javascript-is-there-any-way-to-save-a-var\r\n        handle_rb_loop(wc_rb_ids, wd_hl_settings.wordParams, 'color')\r\n        handle_rb_loop(ic_rb_ids, wd_hl_settings.idiomParams, 'color')\r\n        handle_rb_loop(wb_rb_ids, wd_hl_settings.wordParams, 'backgroundColor')\r\n        handle_rb_loop(ib_rb_ids, wd_hl_settings.idiomParams, 'backgroundColor')\r\n\r\n        add_cb_event_listener(\r\n          'wordsEnabled',\r\n          wd_hl_settings.wordParams,\r\n          'enabled',\r\n        )\r\n        add_cb_event_listener(\r\n          'idiomsEnabled',\r\n          wd_hl_settings.idiomParams,\r\n          'enabled',\r\n        )\r\n        add_cb_event_listener('wordsBold', wd_hl_settings.wordParams, 'bold')\r\n        add_cb_event_listener('idiomsBold', wd_hl_settings.idiomParams, 'bold')\r\n        add_cb_event_listener(\r\n          'wordsBackground',\r\n          wd_hl_settings.wordParams,\r\n          'useBackground',\r\n        )\r\n        add_cb_event_listener(\r\n          'idiomsBackground',\r\n          wd_hl_settings.idiomParams,\r\n          'useBackground',\r\n        )\r\n        add_cb_event_listener(\r\n          'wordsColor',\r\n          wd_hl_settings.wordParams,\r\n          'useColor',\r\n        )\r\n        add_cb_event_listener(\r\n          'idiomsColor',\r\n          wd_hl_settings.idiomParams,\r\n          'useColor',\r\n        )\r\n\r\n        add_hover_rb_listeners()\r\n\r\n        if (wd_developer_mode) {\r\n          document.getElementById('debugControl').style.display = 'block'\r\n        }\r\n\r\n        document\r\n          .getElementById('gdSyncButton')\r\n          .addEventListener('click', request_permissions_and_sync)\r\n        document\r\n          .getElementById('gdStopSyncButton')\r\n          .addEventListener('click', stop_synchronization)\r\n\r\n        document\r\n          .getElementById('saveVocab')\r\n          .addEventListener('click', process_export)\r\n        document\r\n          .getElementById('loadVocab')\r\n          .addEventListener('click', process_import)\r\n\r\n        document\r\n          .getElementById('getFromStorageBtn')\r\n          .addEventListener('click', process_get_dbg)\r\n        document\r\n          .getElementById('setToStorageBtn')\r\n          .addEventListener('click', process_set_dbg)\r\n\r\n        document\r\n          .getElementById('testManifestWarningsBtn')\r\n          .addEventListener('click', process_test_warnings)\r\n\r\n        document\r\n          .getElementById('addDict')\r\n          .addEventListener('click', process_add_dict)\r\n        document\r\n          .getElementById('testNewDict')\r\n          .addEventListener('click', process_test_new_dict)\r\n\r\n        document.getElementById('moreInfoLink').href =\r\n          chrome.runtime.getURL('sync_help.html')\r\n\r\n        document\r\n          .getElementById('saveVisuals')\r\n          .addEventListener('click', function () {\r\n            chrome.storage.local.set({ wd_hl_settings })\r\n          })\r\n\r\n        document\r\n          .getElementById('defaultDicts')\r\n          .addEventListener('click', function () {\r\n            wd_online_dicts = make_default_online_dicts()\r\n            chrome.storage.local.set({ wd_online_dicts })\r\n            initContextMenus(wd_online_dicts)\r\n            show_user_dicts()\r\n          })\r\n\r\n        document\r\n          .getElementById('pronunciationEnabled')\r\n          .addEventListener('click', function (e) {\r\n            wd_enable_tts = e.target.checked\r\n            chrome.storage.local.set({ wd_enable_tts })\r\n          })\r\n\r\n        display_sync_interface()\r\n        show_internal_state()\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', function (event) {\r\n  localizeHtmlPage()\r\n  process_display()\r\n})\r\n"],"names":[],"sourceRoot":""}