{"version":3,"file":"background.js","mappings":";;;;;;;;;;;;;;;;;;;AAAO;AACP,sBAAsB,mCAAmC;AACzD,0CAA0C,wBAAwB;AAClE,GAAG;AACH;;AAEO;AACP;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,iDAAiD;AACpF;AACA,GAAG;AACH;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,sBAAsB;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEO;AACP;AACA;AACA,kDAAkD;AAClD,6FAA6F;AAC7F,mEAAmE;AACnE;AACA,+BAA+B,eAAe;AAC9C;AACA;;AAEO;AACP;AACA;AACA,kBAAkB,oBAAoB;AACtC;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA,uBAAuB,MAAM;AAC7B;AACA,GAAG;AACH;;;;;;;;;;;;;;;;;;;;;;AC3H8D;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA,uBAAuB,cAAc;AACrC;AACA,GAAG;AACH;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;;AAEO;AACP;AACA,IAAI,gEAAmB;AACvB;AACA;;AAEO;AACP;AACA,EAAE,wDAAU;AACZ;;AAEO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,gBAAgB,wFAAwF;AACxG,gBAAgB,6FAA6F;AAC7G,gBAAgB,sGAAsG;AACtH;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,iCAAiC,mEAAmE;AACpG,oBAAoB,sBAAsB;AAC1C;AACA;AACA,GAAG;AACH;;;;;;;SC1PA;SACA;;SAEA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;;SAEA;SACA;;SAEA;SACA;SACA;;;;;UCtBA;UACA;UACA;UACA;UACA,yCAAyC,wCAAwC;UACjF;UACA;UACA;;;;;UCPA;;;;;UCAA;UACA;UACA;UACA,uDAAuD,iBAAiB;UACxE;UACA,gDAAgD,aAAa;UAC7D;;;;;;;;;;;;ACNgF;AAChF;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB,kBAAkB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,uCAAuC;AAC7D,sBAAsB,wBAAwB;AAC9C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,oBAAoB;AACxC;AACA;AACA;AACA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,uBAAuB;AAC7C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6BAA6B,+BAA+B;AAC5D,iCAAiC,kBAAkB;AACnD,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iCAAiC,wCAAwC;AACzE;AACA;AACA,MAAM;AACN,6BAA6B,qBAAqB;AAClD;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,qBAAqB;AACvC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB,kBAAkB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,iFAAiF;AAChG,qBAAqB;AACrB;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH;;AAEA;AACA,eAAe,wDAAwD,aAAa;AACpF,qBAAqB;AACrB;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,wBAAwB,qCAAqC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,wBAAwB,qCAAqC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,6BAA6B;AAC7B;AACA;AACA;AACA,iCAAiC,kBAAkB;AACnD,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mDAAmD,6BAA6B;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mDAAmD,6BAA6B;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yFAAyF,4BAA4B;AACrH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,sBAAsB;AAC3C,MAAM;AACN;AACA,uBAAuB,0CAA0C;AACjE,OAAO;AACP;AACA,MAAM;AACN;AACA;AACA,yCAAyC,4CAA4C;AACrF;AACA;AACA,oDAAoD,oCAAoC;AACxF;AACA;AACA;AACA,iBAAiB;AACjB,gBAAgB;AAChB,oDAAoD,mCAAmC;AACvF;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,WAAW;AACX,SAAS;AACT,QAAQ;AACR,uCAAuC,8CAA8C;AACrF,QAAQ;AACR,uCAAuC,iDAAiD;AACxF;AACA,MAAM;AACN;AACA,2BAA2B,cAAc,mBAAmB;AAC5D,MAAM;AACN;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,gCAAgC;AACnE;AACA;AACA;AACA,mCAAmC,sBAAsB;AACzD;AACA;AACA;AACA,8BAA8B;AAC9B,mCAAmC,sCAAsC;AACzE;AACA;AACA;AACA,0BAA0B,4EAAyB;AACnD,mCAAmC,kCAAkC;AACrE;AACA,MAAM,mEAAgB;;AAEtB;AACA;AACA,mCAAmC,sBAAsB;AACzD;AACA;AACA;AACA,mCAAmC,qBAAqB;AACxD;AACA;AACA;AACA,mCAAmC,wBAAwB;AAC3D;AACA;AACA;AACA,mCAAmC,mBAAmB;AACtD;AACA;AACA;AACA,mCAAmC,mBAAmB;AACtD;AACA;AACA;;AAEA;AACA;AACA;AACA,yCAAyC,4BAA4B;AACrE;AACA;AACA,GAAG;AACH;;AAEA","sources":["webpack:///./src/common_lib.js","webpack:///./src/context_menu_lib.js","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./src/background.js"],"sourcesContent":["export function request_unhighlight(lemma) {\n  chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {\n    chrome.tabs.sendMessage(tabs[0].id, { wdm_unhighlight: lemma })\n  })\n}\n\nexport function make_id_suffix(text) {\n  var before = btoa(text)\n  var after = before.replace(/\\+/g, '_').replace(/\\//g, '-').replace(/=/g, '_')\n  return after\n}\n\nexport function sync_if_needed() {\n  var req_keys = ['wd_last_sync', 'wd_gd_sync_enabled', 'wd_last_sync_error']\n  chrome.storage.local.get(req_keys, function (result) {\n    var wd_last_sync = result.wd_last_sync\n    var wd_gd_sync_enabled = result.wd_gd_sync_enabled\n    var wd_last_sync_error = result.wd_last_sync_error\n    if (!wd_gd_sync_enabled || wd_last_sync_error != null) {\n      return\n    }\n    var cur_date = new Date()\n    var mins_passed = (cur_date.getTime() - wd_last_sync) / (60 * 1000)\n    var sync_period_mins = 30\n    if (mins_passed >= sync_period_mins) {\n      chrome.runtime.sendMessage({ wdm_request: 'gd_sync', interactive_mode: false })\n    }\n  })\n}\n\nexport function add_lexeme(lexeme, result_handler) {\n  var req_keys = [\n    'words_discoverer_eng_dict',\n    'wd_idioms',\n    'wd_user_vocabulary',\n    'wd_user_vocab_added',\n    'wd_user_vocab_deleted',\n  ]\n  chrome.storage.local.get(req_keys, function (result) {\n    var dict_words = result.words_discoverer_eng_dict\n    var dict_idioms = result.wd_idioms\n    var user_vocabulary = result.wd_user_vocabulary\n    var wd_user_vocab_added = result.wd_user_vocab_added\n    var wd_user_vocab_deleted = result.wd_user_vocab_deleted\n    if (lexeme.length > 100) {\n      result_handler('bad', undefined)\n      return\n    }\n    lexeme = lexeme.toLowerCase()\n    lexeme = lexeme.trim()\n    if (!lexeme) {\n      result_handler('bad', undefined)\n      return\n    }\n\n    var key = lexeme\n    if (dict_words.hasOwnProperty(lexeme)) {\n      var wf = dict_words[lexeme]\n      if (wf) {\n        key = wf[0]\n      }\n    } else if (dict_idioms.hasOwnProperty(lexeme)) {\n      var wf = dict_idioms[lexeme]\n      if (wf && wf != -1) {\n        key = wf\n      }\n    }\n\n    if (user_vocabulary.hasOwnProperty(key)) {\n      result_handler('exists', key)\n      return\n    }\n\n    var new_state = { wd_user_vocabulary: user_vocabulary }\n\n    user_vocabulary[key] = 1\n    if (typeof wd_user_vocab_added !== 'undefined') {\n      wd_user_vocab_added[key] = 1\n      new_state['wd_user_vocab_added'] = wd_user_vocab_added\n    }\n    if (typeof wd_user_vocab_deleted !== 'undefined') {\n      delete wd_user_vocab_deleted[key]\n      new_state['wd_user_vocab_deleted'] = wd_user_vocab_deleted\n    }\n\n    chrome.storage.local.set(new_state, function () {\n      sync_if_needed()\n      result_handler('ok', key)\n    })\n  })\n}\n\nexport function make_hl_style(hl_params) {\n  if (!hl_params.enabled) return undefined\n  let result = ''\n  if (hl_params.bold) result += 'font-weight:bold;'\n  if (hl_params.useBackground) result += 'background-color:' + hl_params.backgroundColor + ';'\n  if (hl_params.useColor) result += 'color:' + hl_params.color + ';'\n  if (!result) return undefined\n  result += 'font-size:inherit;display:inline;'\n  return result\n}\n\nexport function localizeHtmlPage() {\n  //Localize by replacing __MSG_***__ meta tags\n  var objects = document.getElementsByTagName('html')\n  for (var j = 0; j < objects.length; j++) {\n    var obj = objects[j]\n    var valStrH = obj.innerHTML.toString()\n    var valNewH = valStrH.replace(/__MSG_(\\w+)__/g, function (match, v1) {\n      return v1 ? chrome.i18n.getMessage(v1) : ''\n    })\n    if (valNewH != valStrH) {\n      obj.innerHTML = valNewH\n    }\n  }\n}\n\nexport function spformat(src) {\n  var args = Array.prototype.slice.call(arguments, 1)\n  return src.replace(/{(\\d+)}/g, function (match, number) {\n    return typeof args[number] != 'undefined' ? args[number] : match\n  })\n}\n","import { request_unhighlight, add_lexeme } from './common_lib'\n\nconst isoLangs = {\n  ab: 'Abkhaz',\n  aa: 'Afar',\n  af: 'Afrikaans',\n  ak: 'Akan',\n  sq: 'Albanian',\n  am: 'Amharic',\n  ar: 'Arabic',\n  an: 'Aragonese',\n  hy: 'Armenian',\n  as: 'Assamese',\n  av: 'Avaric',\n  ae: 'Avestan',\n  ay: 'Aymara',\n  az: 'Azerbaijani',\n  bm: 'Bambara',\n  ba: 'Bashkir',\n  eu: 'Basque',\n  be: 'Belarusian',\n  bn: 'Bengali',\n  bh: 'Bihari',\n  bi: 'Bislama',\n  bs: 'Bosnian',\n  br: 'Breton',\n  bg: 'Bulgarian',\n  my: 'Burmese',\n  ca: 'Catalan',\n  ch: 'Chamorro',\n  ce: 'Chechen',\n  ny: 'Chichewa',\n  zh: 'Chinese',\n  cv: 'Chuvash',\n  kw: 'Cornish',\n  co: 'Corsican',\n  cr: 'Cree',\n  hr: 'Croatian',\n  cs: 'Czech',\n  da: 'Danish',\n  dv: 'Divehi',\n  nl: 'Dutch',\n  en: 'English',\n  eo: 'Esperanto',\n  et: 'Estonian',\n  ee: 'Ewe',\n  fo: 'Faroese',\n  fj: 'Fijian',\n  fi: 'Finnish',\n  fr: 'French',\n  ff: 'Fula',\n  gl: 'Galician',\n  ka: 'Georgian',\n  de: 'German',\n  el: 'Greek',\n  gu: 'Gujarati',\n  ht: 'Haitian',\n  ha: 'Hausa',\n  he: 'Hebrew',\n  hz: 'Herero',\n  hi: 'Hindi',\n  ho: 'Hiri Motu',\n  hu: 'Hungarian',\n  ia: 'Interlingua',\n  id: 'Indonesian',\n  ie: 'Interlingue',\n  ga: 'Irish',\n  ig: 'Igbo',\n  ik: 'Inupiaq',\n  io: 'Ido',\n  is: 'Icelandic',\n  it: 'Italian',\n  iu: 'Inuktitut',\n  ja: 'Japanese',\n  jv: 'Javanese',\n  kl: 'Kalaallisut',\n  kn: 'Kannada',\n  kr: 'Kanuri',\n  ks: 'Kashmiri',\n  kk: 'Kazakh',\n  km: 'Khmer',\n  ki: 'Kikuyu',\n  rw: 'Kinyarwanda',\n  ky: 'Kirghiz',\n  kv: 'Komi',\n  kg: 'Kongo',\n  ko: 'Korean',\n  ku: 'Kurdish',\n  kj: 'Kwanyama',\n  la: 'Latin',\n  lb: 'Luxembourgish',\n  lg: 'Luganda',\n  li: 'Limburgish',\n  ln: 'Lingala',\n  lo: 'Lao',\n  lt: 'Lithuanian',\n  lu: 'Luba-Katanga',\n  lv: 'Latvian',\n  gv: 'Manx',\n  mk: 'Macedonian',\n  mg: 'Malagasy',\n  ms: 'Malay',\n  ml: 'Malayalam',\n  mt: 'Maltese',\n  mh: 'Marshallese',\n  mn: 'Mongolian',\n  na: 'Nauru',\n  nv: 'Navajo',\n  nd: 'Ndebele',\n  ne: 'Nepali',\n  ng: 'Ndonga',\n  nn: 'Norwegian',\n  no: 'Norwegian',\n  ii: 'Nuosu',\n  nr: 'Ndebele',\n  oc: 'Occitan',\n  oj: 'Ojibwe',\n  om: 'Oromo',\n  or: 'Oriya',\n  os: 'Ossetian',\n  pa: 'Panjabi',\n  fa: 'Persian',\n  pl: 'Polish',\n  ps: 'Pashto',\n  pt: 'Portuguese',\n  qu: 'Quechua',\n  rm: 'Romansh',\n  rn: 'Kirundi',\n  ro: 'Romanian',\n  ru: 'Russian',\n  sc: 'Sardinian',\n  sd: 'Sindhi',\n  se: 'Sami',\n  sm: 'Samoan',\n  sg: 'Sango',\n  sr: 'Serbian',\n  gd: 'Gaelic',\n  sn: 'Shona',\n  si: 'Sinhala',\n  sk: 'Slovak',\n  sl: 'Slovene',\n  so: 'Somali',\n  st: 'Sotho',\n  es: 'Spanish',\n  su: 'Sundanese',\n  sw: 'Swahili',\n  ss: 'Swati',\n  sv: 'Swedish',\n  ta: 'Tamil',\n  te: 'Telugu',\n  tg: 'Tajik',\n  th: 'Thai',\n  ti: 'Tigrinya',\n  bo: 'Tibetan',\n  tk: 'Turkmen',\n  tl: 'Tagalog',\n  tn: 'Tswana',\n  to: 'Tonga',\n  tr: 'Turkish',\n  ts: 'Tsonga',\n  tt: 'Tatar',\n  tw: 'Twi',\n  ty: 'Tahitian',\n  ug: 'Uighur',\n  uk: 'Ukrainian',\n  ur: 'Urdu',\n  uz: 'Uzbek',\n  ve: 'Venda',\n  vi: 'Vietnamese',\n  wa: 'Walloon',\n  cy: 'Welsh',\n  wo: 'Wolof',\n  fy: 'Frisian',\n  xh: 'Xhosa',\n  yi: 'Yiddish',\n  yo: 'Yoruba',\n  za: 'Zhuang',\n}\n\nexport function get_dict_definition_url(dictUrl, text) {\n  return dictUrl + encodeURIComponent(text)\n}\n\nexport function showDefinition(dictUrl, text) {\n  var fullUrl = get_dict_definition_url(dictUrl, text)\n  chrome.tabs.create({ url: fullUrl }, function (tab) {\n    // opens definition in a new tab\n  })\n}\n\nexport function createDictionaryEntry(title, dictUrl, entryId) {\n  chrome.contextMenus.create({\n    title: title,\n    contexts: ['selection'],\n    id: entryId,\n    // onclick: function (info, tab) {\n    //   var word = info.selectionText\n    //   showDefinition(dictUrl, word)\n    // },\n  })\n  chrome.contextMenus.onClicked.addListener(function (info, tab) {\n    var word = info.selectionText\n    showDefinition(dictUrl, word)\n  })\n}\n\nexport function context_handle_add_result(report, lemma) {\n  if (report === 'ok') {\n    request_unhighlight(lemma)\n  }\n}\n\nexport function onClickHandler(info, tab) {\n  var word = info.selectionText\n  add_lexeme(word, context_handle_add_result)\n}\n\nexport function make_default_online_dicts() {\n  const result = []\n\n  var uiLang = chrome.i18n.getUILanguage()\n  uiLang = uiLang.split('-')[0]\n  if (uiLang != 'en' && isoLangs.hasOwnProperty(uiLang)) {\n    var langName = isoLangs[uiLang]\n    result.push({\n      title: 'Translate to ' + langName + ' in Google',\n      url: 'https://translate.google.com/#en/' + uiLang + '/',\n    })\n  }\n  result.push({ title: 'Define in Merriam-Webster', url: 'https://www.merriam-webster.com/dictionary/' })\n  result.push({ title: 'Define in Google', url: 'https://encrypted.google.com/search?hl=en&gl=en&q=define:' })\n  result.push({ title: 'View pictures in Google', url: 'https://encrypted.google.com/search?hl=en&gl=en&tbm=isch&q=' })\n  return result\n}\n\nexport function initContextMenus(dictPairs) {\n  chrome.contextMenus.removeAll(function () {\n    var title = chrome.i18n.getMessage('menuItem')\n    chrome.contextMenus.create({\n      title: title,\n      contexts: ['selection'],\n      id: 'vocab_select_add',\n      // onclick: onClickHandler,\n    })\n    chrome.contextMenus.onClicked.addListener(onClickHandler)\n    chrome.contextMenus.create({ type: 'separator', contexts: ['selection'], id: 'wd_separator_id' })\n    for (var i = 0; i < dictPairs.length; ++i) {\n      createDictionaryEntry(dictPairs[i].title, dictPairs[i].url, 'wd_define_' + i)\n    }\n  })\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { make_default_online_dicts, initContextMenus } from './context_menu_lib'\nvar gapi_loaded = false\nvar gapi_inited = false\n\n//TODO check chrome.runtime.lastError for all storage.local operations\n\nfunction do_load_dictionary(file_text) {\n  var lines = file_text.split('\\n')\n  var rare_words = {}\n  var rank = 0\n  var prev_lemma = null\n  for (var i = 0; i < lines.length; ++i) {\n    var fields = lines[i].split('\\t')\n    if (i + 1 === lines.length && fields.length == 1) break\n    var form = fields[0]\n    var lemma = fields[1]\n    if (lemma !== prev_lemma) {\n      rank += 1\n      prev_lemma = lemma\n    }\n    rare_words[fields[0]] = [fields[1], rank]\n  }\n  const local_storage = chrome.storage.local\n  local_storage.set({ words_discoverer_eng_dict: rare_words })\n  local_storage.set({ wd_word_max_rank: rank })\n}\n\nfunction load_eng_dictionary() {\n  const file_path = chrome.runtime.getURL('eng_dict.txt')\n  // var xhr = new XMLHttpRequest()\n  // xhr.onreadystatechange = function () {\n  //   if (xhr.readyState == XMLHttpRequest.DONE) {\n  //     do_load_dictionary(xhr.responseText)\n  //   }\n  // }\n  // xhr.open('GET', file_path, true)\n  // xhr.send(null)\n  fetch(file_path)\n    .then(res => res.text())\n    .then(do_load_dictionary)\n}\n\nfunction do_load_idioms(file_text) {\n  var lines = file_text.split('\\n')\n  var rare_words = {}\n  for (var lno = 0; lno < lines.length; ++lno) {\n    var fields = lines[lno].split('\\t')\n    if (lno + 1 === lines.length && fields.length == 1) break\n    var words = fields[0].split(' ')\n    for (var i = 0; i + 1 < words.length; ++i) {\n      const key = words.slice(0, i + 1).join(' ')\n      rare_words[key] = -1\n    }\n    const key = fields[0]\n    rare_words[key] = fields[1]\n  }\n  const local_storage = chrome.storage.local\n  local_storage.set({ wd_idioms: rare_words })\n}\n\nfunction load_idioms() {\n  const file_path = chrome.runtime.getURL('eng_idioms.txt')\n  // var xhr = new XMLHttpRequest()\n  // xhr.onreadystatechange = function () {\n  //   if (xhr.readyState == XMLHttpRequest.DONE) {\n  //     do_load_idioms(xhr.responseText)\n  //   }\n  // }\n  // xhr.open('GET', file_path, true)\n  // xhr.send(null)\n  fetch(file_path)\n    .then(res => res.text())\n    .then(do_load_idioms)\n}\n\nfunction report_sync_failure(error_msg) {\n  chrome.storage.local.set({ wd_last_sync_error: error_msg }, function () {\n    chrome.runtime.sendMessage({ sync_feedback: 1 })\n  })\n}\n\nfunction load_script(url, callback_func) {\n  var request = new XMLHttpRequest()\n  request.onreadystatechange = function () {\n    if (request.readyState !== 4) return\n    if (request.status !== 200) return\n    eval(request.responseText)\n    callback_func()\n  }\n  request.open('GET', url)\n  request.send()\n}\n\nfunction authorize_user(interactive_authorization) {\n  chrome.identity.getAuthToken({ interactive: interactive_authorization }, function (token) {\n    if (token === undefined) {\n      report_sync_failure('Unable to get oauth token')\n    } else {\n      gapi.client.setToken({ access_token: token })\n      sync_user_vocabularies()\n    }\n  })\n}\n\nfunction transform_key(src_key) {\n  var dc = window.atob(src_key)\n  dc = dc.substring(3)\n  dc = dc.substring(0, dc.length - 6)\n  return dc\n}\n\nfunction generate_key() {\n  var protokey = 'b2ZCQUl6YVN5Q2hqM2xvZkJPWnV2TUt2TGNCSlVaa0RDTUhZa25NWktBa25NWktB'\n  return transform_key(protokey)\n}\n\nfunction list_to_set(src_list) {\n  const result = {}\n  for (var i = 0; i < src_list.length; ++i) {\n    result[src_list[i]] = 1\n  }\n  return result\n}\n\nfunction substract_from_set(lhs_set, rhs_set) {\n  for (var key in rhs_set) {\n    if (rhs_set.hasOwnProperty(key) && lhs_set.hasOwnProperty(key)) {\n      delete lhs_set[key]\n    }\n  }\n}\n\nfunction add_to_set(lhs_set, rhs_set) {\n  for (var key in rhs_set) {\n    if (rhs_set.hasOwnProperty(key)) {\n      lhs_set[key] = 1\n    }\n  }\n}\n\nfunction serialize_vocabulary(entries) {\n  const keys = []\n  for (var key in entries) {\n    if (entries.hasOwnProperty(key)) {\n      keys.push(key)\n    }\n  }\n  keys.sort()\n  return keys.join('\\r\\n')\n}\n\nfunction parse_vocabulary(text) {\n  // code duplication with parse_vocabulary in import.js\n  var lines = text.split('\\n')\n  var found = []\n  for (var i = 0; i < lines.length; ++i) {\n    var word = lines[i]\n    if (i + 1 === lines.length && word.length <= 1) break\n    if (word.slice(-1) === '\\r') {\n      word = word.slice(0, -1)\n    }\n    found.push(word)\n  }\n  return found\n}\n\nfunction create_new_dir(dir_name, success_cb) {\n  var body = { name: dir_name, mimeType: 'application/vnd.google-apps.folder', appProperties: { wdfile: '1' } }\n  var req_params = { path: 'https://www.googleapis.com/drive/v3/files/', method: 'POST', body: body }\n  gapi.client.request(req_params).then(function (jsonResp, rawResp) {\n    if (jsonResp.status == 200) {\n      success_cb(jsonResp.result.id)\n    } else {\n      report_sync_failure('Bad dir create status: ' + jsonResp.status)\n    }\n  })\n}\n\nfunction create_new_file(fname, parent_dir_id, success_cb) {\n  var body = { name: fname, parents: [parent_dir_id], appProperties: { wdfile: '1' }, mimeType: 'text/plain' }\n  var req_params = { path: 'https://www.googleapis.com/drive/v3/files', method: 'POST', body: body }\n  gapi.client.request(req_params).then(function (jsonResp, rawResp) {\n    if (jsonResp.status == 200) {\n      success_cb(jsonResp.result.id)\n    } else {\n      report_sync_failure('Bad file create status: ' + jsonResp.status)\n    }\n  })\n}\n\nfunction upload_file_content(file_id, file_content, success_cb) {\n  var req_params = {\n    path: 'https://www.googleapis.com/upload/drive/v3/files/' + file_id,\n    method: 'PATCH',\n    body: file_content,\n  }\n  gapi.client.request(req_params).then(function (jsonResp, rawResp) {\n    if (jsonResp.status == 200) {\n      success_cb()\n    } else {\n      report_sync_failure('Bad upload content status: ' + jsonResp.status)\n    }\n  })\n}\n\nfunction fetch_file_content(file_id, success_cb) {\n  // https://developers.google.com/drive/v3/web/manage-downloads\n  var full_query_url = 'https://www.googleapis.com/drive/v3/files/' + file_id + '?alt=media'\n  gapi.client.request({ path: full_query_url, method: 'GET' }).then(function (jsonResp, rawResp) {\n    if (jsonResp.status != 200) {\n      report_sync_failure('Bad status: ' + jsonResp.status + ' for getting content of file: ' + file_id)\n      return\n    }\n    var file_content = jsonResp.body\n    success_cb(file_id, file_content)\n  })\n}\n\nfunction find_gdrive_id(query, found_cb, not_found_cb) {\n  // generic function to find single object id\n  var full_query_url = 'https://www.googleapis.com/drive/v3/files?q=' + encodeURIComponent(query)\n  gapi.client.request({ path: full_query_url, method: 'GET' }).then(function (jsonResp, rawResp) {\n    if (jsonResp.status != 200) {\n      report_sync_failure('Bad status: ' + jsonResp.status + ' for query: ' + query)\n      return\n    }\n    if (jsonResp.result.files.length > 1) {\n      report_sync_failure('More than one object found for query: ' + query)\n      return\n    } else if (jsonResp.result.files.length == 1) {\n      var drive_id = jsonResp.result.files[0].id\n      found_cb(drive_id)\n      return\n    }\n    not_found_cb()\n  })\n}\n\nfunction apply_cloud_vocab(entries) {\n  var sync_date = new Date()\n  var sync_time = sync_date.getTime()\n  var new_state = {\n    wd_last_sync_error: null,\n    wd_user_vocabulary: entries,\n    wd_user_vocab_added: {},\n    wd_user_vocab_deleted: {},\n    wd_last_sync: sync_time,\n  }\n  chrome.storage.local.set(new_state, function () {\n    chrome.runtime.sendMessage({ sync_feedback: 1 })\n  })\n}\n\nfunction sync_vocabulary(dir_id, vocab) {\n  const merge_and_upload_vocab = function (file_id, file_content) {\n    const vocab_list = parse_vocabulary(file_content)\n    var entries = list_to_set(vocab_list)\n    substract_from_set(entries, vocab.deleted)\n    add_to_set(entries, vocab.added)\n    const merged_content = serialize_vocabulary(entries)\n\n    const set_merged_vocab = function () {\n      apply_cloud_vocab(entries)\n    }\n    upload_file_content(file_id, merged_content, set_merged_vocab)\n  }\n\n  const merge_vocab_to_cloud = function (file_id) {\n    fetch_file_content(file_id, merge_and_upload_vocab)\n  }\n\n  var vocab_file_name = vocab.name + '.txt'\n  var file_query =\n    \"name = '\" +\n    vocab_file_name +\n    \"' and trashed = false and appProperties has { key='wdfile' and value='1' } and '\" +\n    dir_id +\n    \"' in parents\"\n  const create_new_file_wrap = function () {\n    create_new_file(vocab_file_name, dir_id, merge_vocab_to_cloud)\n    var new_added = {}\n    add_to_set(new_added, vocab.all)\n    add_to_set(new_added, vocab.added)\n    vocab.added = new_added\n  }\n  find_gdrive_id(file_query, merge_vocab_to_cloud, create_new_file_wrap)\n}\n\nfunction backup_vocabulary(dir_id, vocab, success_cb) {\n  const merge_and_upload_backup = function (file_id, file_content) {\n    const vocab_list = parse_vocabulary(file_content)\n    var entries = list_to_set(vocab_list)\n    add_to_set(entries, vocab.all)\n    add_to_set(entries, vocab.deleted)\n    add_to_set(entries, vocab.added)\n    const merged_content = serialize_vocabulary(entries)\n    upload_file_content(file_id, merged_content, success_cb)\n  }\n  const merge_backup_to_cloud = function (file_id) {\n    fetch_file_content(file_id, merge_and_upload_backup)\n  }\n\n  var backup_file_name = '.' + vocab.name + '.backup'\n  var backup_query =\n    \"name = '\" +\n    backup_file_name +\n    \"' and trashed = false and appProperties has { key='wdfile' and value='1' } and '\" +\n    dir_id +\n    \"' in parents\"\n  const create_new_backup_file_wrap = function () {\n    create_new_file(backup_file_name, dir_id, merge_backup_to_cloud)\n  }\n  find_gdrive_id(backup_query, merge_backup_to_cloud, create_new_backup_file_wrap)\n}\n\nfunction perform_full_sync(vocab) {\n  var dir_name = 'Words Discoverer Sync'\n  var dir_query = \"name = '\" + dir_name + \"' and trashed = false and appProperties has { key='wdfile' and value='1' }\"\n  const backup_and_sync_vocabulary = function (dir_id) {\n    const sync_vocabulary_wrap = function () {\n      sync_vocabulary(dir_id, vocab)\n    }\n    backup_vocabulary(dir_id, vocab, sync_vocabulary_wrap)\n  }\n  const create_new_dir_wrap = function () {\n    create_new_dir(dir_name, backup_and_sync_vocabulary)\n  }\n  find_gdrive_id(dir_query, backup_and_sync_vocabulary, create_new_dir_wrap)\n}\n\nfunction sync_user_vocabularies() {\n  chrome.storage.local.get(['wd_user_vocabulary', 'wd_user_vocab_added', 'wd_user_vocab_deleted'], function (result) {\n    var wd_user_vocabulary = result.wd_user_vocabulary\n    var wd_user_vocab_added = result.wd_user_vocab_added\n    var wd_user_vocab_deleted = result.wd_user_vocab_deleted\n    if (typeof wd_user_vocabulary === 'undefined') {\n      wd_user_vocabulary = {}\n    }\n    if (typeof wd_user_vocab_added === 'undefined') {\n      wd_user_vocab_added = Object.assign({}, wd_user_vocabulary)\n    }\n    if (typeof wd_user_vocab_deleted === 'undefined') {\n      wd_user_vocab_deleted = {}\n    }\n    var vocab = {\n      name: 'my_vocabulary',\n      all: wd_user_vocabulary,\n      added: wd_user_vocab_added,\n      deleted: wd_user_vocab_deleted,\n    }\n    perform_full_sync(vocab)\n  })\n}\n\nfunction init_gapi(interactive_authorization) {\n  const gapikey = generate_key()\n  const init_params = { apiKey: gapikey }\n  gapi.client.init(init_params).then(\n    function () {\n      gapi_inited = true\n      authorize_user(interactive_authorization)\n    },\n    function (reject_reason) {\n      var error_msg = 'Unable to init client. Reject reason: ' + reject_reason\n      console.error(error_msg)\n      report_sync_failure(error_msg)\n    }\n  )\n}\n\nfunction load_and_init_gapi(interactive_authorization) {\n  load_script('https://apis.google.com/js/api.js', function () {\n    gapi.load('client', function () {\n      gapi_loaded = true\n      init_gapi(interactive_authorization)\n    })\n  })\n}\n\nfunction start_sync_sequence(interactive_authorization) {\n  chrome.storage.local.set({ wd_last_sync_error: 'Unknown sync problem' }, function () {\n    if (!gapi_loaded) {\n      load_and_init_gapi(interactive_authorization)\n    } else if (!gapi_inited) {\n      init_gapi(interactive_authorization)\n    } else {\n      authorize_user(interactive_authorization)\n    }\n  })\n}\n\nfunction initialize_extension() {\n  chrome.runtime.onMessage.addListener(function (request, sender, sendResponse) {\n    if (request.wdm_request == 'hostname') {\n      const tab_url = sender.tab.url\n      var url = new URL(tab_url)\n      var domain = url.hostname\n      sendResponse({ wdm_hostname: domain })\n    } else if (request.wdm_request == 'page_language') {\n      chrome.tabs.detectLanguage(sender.tab.id, function (iso_language_code) {\n        sendResponse({ wdm_iso_language_code: iso_language_code })\n      })\n      return true // This is to indicate that sendResponse would be sent asynchronously and keep the message channel open, see https://developer.chrome.com/extensions/runtime#event-onMessage\n    } else if (request.wdm_verdict) {\n      if (request.wdm_verdict == 'highlight') {\n        chrome.storage.local.get(['wd_gd_sync_enabled', 'wd_last_sync_error'], function (result) {\n          chrome.browserAction.setIcon({ path: 'result48.png', tabId: sender.tab.id }, function () {\n            if (result.wd_gd_sync_enabled) {\n              if (result.wd_last_sync_error == null) {\n                chrome.browserAction.setBadgeText({ text: 'sync', tabId: sender.tab.id })\n                chrome.browserAction.setBadgeBackgroundColor({\n                  color: [25, 137, 0, 255],\n                  tabId: sender.tab.id,\n                })\n              } else {\n                chrome.browserAction.setBadgeText({ text: 'err', tabId: sender.tab.id })\n                chrome.browserAction.setBadgeBackgroundColor({\n                  color: [137, 0, 0, 255],\n                  tabId: sender.tab.id,\n                })\n              }\n            }\n          })\n        })\n      } else if (request.wdm_verdict == 'keyboard') {\n        chrome.browserAction.setIcon({ path: 'no_dynamic.png', tabId: sender.tab.id })\n      } else {\n        chrome.browserAction.setIcon({ path: 'result48_gray.png', tabId: sender.tab.id })\n      }\n    } else if (request.wdm_new_tab_url) {\n      var fullUrl = request.wdm_new_tab_url\n      chrome.tabs.create({ url: fullUrl }, function (tab) {})\n    } else if (request.wdm_request == 'gd_sync') {\n      start_sync_sequence(request.interactive_mode)\n    }\n  })\n\n  chrome.storage.local.get(\n    [\n      'words_discoverer_eng_dict',\n      'wd_hl_settings',\n      'wd_online_dicts',\n      'wd_hover_settings',\n      'wd_idioms',\n      'wd_show_percents',\n      'wd_is_enabled',\n      'wd_user_vocabulary',\n      'wd_black_list',\n      'wd_white_list',\n      'wd_gd_sync_enabled',\n      'wd_enable_tts',\n    ],\n    function (result) {\n      load_eng_dictionary()\n      load_idioms()\n      let wd_hl_settings = result.wd_hl_settings\n      if (typeof wd_hl_settings == 'undefined') {\n        const word_hl_params = {\n          enabled: true,\n          quoted: false,\n          bold: true,\n          useBackground: false,\n          backgroundColor: 'rgb(255, 248, 220)',\n          useColor: true,\n          color: 'red',\n        }\n        const idiom_hl_params = {\n          enabled: true,\n          quoted: false,\n          bold: true,\n          useBackground: false,\n          backgroundColor: 'rgb(255, 248, 220)',\n          useColor: true,\n          color: 'blue',\n        }\n        wd_hl_settings = {\n          wordParams: word_hl_params,\n          idiomParams: idiom_hl_params,\n        }\n        chrome.storage.local.set({ wd_hl_settings: wd_hl_settings })\n      }\n      const wd_enable_tts = result.wd_enable_tts\n      if (typeof wd_enable_tts == 'undefined') {\n        chrome.storage.local.set({ wd_enable_tts: false })\n      }\n      let wd_hover_settings = result.wd_hover_settings\n      if (typeof wd_hover_settings == 'undefined') {\n        wd_hover_settings = { hl_hover: 'always', ow_hover: 'never' }\n        chrome.storage.local.set({ wd_hover_settings: wd_hover_settings })\n      }\n      var wd_online_dicts = result.wd_online_dicts\n      if (typeof wd_online_dicts == 'undefined') {\n        wd_online_dicts = make_default_online_dicts()\n        chrome.storage.local.set({ wd_online_dicts: wd_online_dicts })\n      }\n      initContextMenus(wd_online_dicts)\n\n      const show_percents = result.wd_show_percents\n      if (typeof show_percents === 'undefined') {\n        chrome.storage.local.set({ wd_show_percents: 15 })\n      }\n      const wd_is_enabled = result.wd_is_enabled\n      if (typeof wd_is_enabled === 'undefined') {\n        chrome.storage.local.set({ wd_is_enabled: true })\n      }\n      const user_vocabulary = result.wd_user_vocabulary\n      if (typeof user_vocabulary === 'undefined') {\n        chrome.storage.local.set({ wd_user_vocabulary: {} })\n      }\n      const black_list = result.wd_black_list\n      if (typeof black_list === 'undefined') {\n        chrome.storage.local.set({ wd_black_list: {} })\n      }\n      const white_list = result.wd_white_list\n      if (typeof white_list === 'undefined') {\n        chrome.storage.local.set({ wd_white_list: {} })\n      }\n    }\n  )\n\n  chrome.runtime.onMessage.addListener(function (request, sender, sendResponse) {\n    if ((request.type = 'tts_speak')) {\n      if (!!request.word && typeof request.word === 'string') {\n        chrome.tts.speak(request.word, { lang: 'en', gender: 'male' })\n      }\n    }\n  })\n}\n\ninitialize_extension()\n"],"names":[],"sourceRoot":""}